// SPDX-License-Identifier: MIT
pragma solidity ^0.8.12;

import "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@tableland/evm/contracts/ITablelandTables.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@tableland/evm/contracts/ITablelandTables.sol";
import "@tableland/evm/contracts/utils/SQLHelpers.sol";

contract BasicCreate is ERC721Holder {

    address[] public users ;

    string[] post_comments;

    uint256 internal users_count;
    uint256 internal posts_count;

    struct user{
        uint post_count;
        address addr;
        uint creater;
        uint type_;
        address[] subscribers;
        string[] posts;
        uint videos;
    }

    struct  post  { 
        string content;
        string title;
        uint type_;
        string time;
        string date;
        uint like;
        uint dislike;
        uint views;
        address posted_user;
    }

    post[] public posts;
    user[] public user_data;



    mapping(address => user[]) user_detials ;
    mapping(address => post[]) posts_by_user ;

    post publicobj;
    user add_usr;
    function add_command(){
        
    }

    function add_user(address new_user)public{
        // if user not in users var then store the user
        for (uint i = 0; i < users.length; i++) {
            if (users[i] != new_user) {
                users.push(new_user);

                user memory  add_detials;
                user_data.push(add_detials);
                add_detials.post_count = 0;
                add_detials.addr = msg.sender;
                add_detials.creater = 0;
                add_detials.type_ = 0;
                user_data[user_data.length].subscribers.push(msg.sender);
                user_data[user_data.length].posts.push(" ");
                add_detials.videos=0;
            }
        }
    }

    function get_total_number_of_users() public view returns(uint256){
        return users.length;
    }


    function get_current_user_name()public view returns(address){
        return msg.sender;
    }

    function post_metireals(string memory content,string memory title, string memory time, string memory date )public {

        publicobj = post(content,title,1,time,date,1,1,1,address(this));
        posts_by_user[msg.sender].push(publicobj);
        // if user not in users var then store the user
        add_user(msg.sender);
        posts.push(publicobj);

    }
        
    function get_all_post() public view returns(post[] memory){
        return posts;
    }

    function get_by_username(address addr) public view returns(post[] memory){
        return posts_by_user[addr];
    }

    function add_like(address post_user)public{
        for(uint256 i=0 ; i < posts.length;i++){
            if(posts[i].posted_user == post_user){
                posts[i].like = posts[i].like + 1;
                break;
            }
        }
    }
    function add_views(address post_user)public{
        for(uint256 i=0 ; i < posts.length;i++){
            if(posts[i].posted_user == post_user){
                posts[i].views = posts[i].views + 1;
                break;
            }
        }
    }
    function add_dislike(address post_user)public{
        for(uint256 i=0 ; i < posts.length;i++){
            if(posts[i].posted_user == post_user){
                if(posts[i].dislike <= 0){
                    posts[i].dislike = 0;
                }else{
                    posts[i].like = posts[i].like - 1;
                    break;
                }
            }
        }
    }

    function add_subscriber(address creater,address sub_user)public{
        for(uint256 i=0 ; i < users.length;i++){
            if(user_data[i].addr == creater){
                user_data[i].subscribers.push(sub_user);
                break;
            }
        }
    }
    function get_subscribed_videos()public returns(string[]){
        string[] total_data;
        for(uint256 i=0 ; i < users.length;i++){
            if(user_data[i].addr == address(this)){
                for(uint256 j=0;j<user_data[i].subscribers.length;j++){
                    for(uint256 k=0;k<post.length;k++){
                        if(user_data[i].subscribers[j] == post[k].posted_user){
                            total_data.push(post[k]);
                        }
                    }
                }
        }   }
    }


}
